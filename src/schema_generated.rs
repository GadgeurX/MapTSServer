// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod packet {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum PacketType {
  NONE = 0,
  LoginPacket = 1,

}

pub const ENUM_MIN_PACKET_TYPE: u8 = 0;
pub const ENUM_MAX_PACKET_TYPE: u8 = 1;

impl<'a> flatbuffers::Follow<'a> for PacketType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for PacketType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const PacketType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const PacketType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for PacketType {
    type Output = PacketType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<PacketType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PACKET_TYPE:[PacketType; 2] = [
  PacketType::NONE,
  PacketType::LoginPacket
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_PACKET_TYPE:[&'static str; 2] = [
    "NONE",
    "LoginPacket"
];

pub fn enum_name_packet_type(e: PacketType) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_PACKET_TYPE[index as usize]
}

pub struct PacketTypeUnionTableOffset {}
pub enum LoginPacketOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct LoginPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LoginPacket<'a> {
    type Inner = LoginPacket<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> LoginPacket<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        LoginPacket {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args LoginPacketArgs<'args>) -> flatbuffers::WIPOffset<LoginPacket<'bldr>> {
      let mut builder = LoginPacketBuilder::new(_fbb);
      if let Some(x) = args.password { builder.add_password(x); }
      if let Some(x) = args.login { builder.add_login(x); }
      builder.finish()
    }

    pub const VT_LOGIN: flatbuffers::VOffsetT = 4;
    pub const VT_PASSWORD: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn login(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LoginPacket::VT_LOGIN, None)
  }
  #[inline]
  pub fn password(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LoginPacket::VT_PASSWORD, None)
  }
}

pub struct LoginPacketArgs<'a> {
    pub login: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub password: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for LoginPacketArgs<'a> {
    #[inline]
    fn default() -> Self {
        LoginPacketArgs {
            login: None,
            password: None,
        }
    }
}
pub struct LoginPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LoginPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_login(&mut self, login: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LoginPacket::VT_LOGIN, login);
  }
  #[inline]
  pub fn add_password(&mut self, password: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LoginPacket::VT_PASSWORD, password);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LoginPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LoginPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LoginPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum PacketOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Packet<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Packet<'a> {
    type Inner = Packet<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Packet<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Packet {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PacketArgs) -> flatbuffers::WIPOffset<Packet<'bldr>> {
      let mut builder = PacketBuilder::new(_fbb);
      if let Some(x) = args.data { builder.add_data(x); }
      builder.add_data_type(args.data_type);
      builder.finish()
    }

    pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn data_type(&self) -> PacketType {
    self._tab.get::<PacketType>(Packet::VT_DATA_TYPE, Some(PacketType::NONE)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Packet::VT_DATA, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_login_packet(&self) -> Option<LoginPacket<'a>> {
    if self.data_type() == PacketType::LoginPacket {
      self.data().map(|u| LoginPacket::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct PacketArgs {
    pub data_type: PacketType,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for PacketArgs {
    #[inline]
    fn default() -> Self {
        PacketArgs {
            data_type: PacketType::NONE,
            data: None,
        }
    }
}
pub struct PacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_data_type(&mut self, data_type: PacketType) {
    self.fbb_.push_slot::<PacketType>(Packet::VT_DATA_TYPE, data_type, PacketType::NONE);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Packet::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Packet<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_packet<'a>(buf: &'a [u8]) -> Packet<'a> {
  flatbuffers::get_root::<Packet<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_packet<'a>(buf: &'a [u8]) -> Packet<'a> {
  flatbuffers::get_size_prefixed_root::<Packet<'a>>(buf)
}

#[inline]
pub fn finish_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Packet<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Packet<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod packet

